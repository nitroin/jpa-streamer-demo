package com.speedment.jpastreamer.demo.model;

import com.speedment.jpastreamer.field.ComparableField;
import com.speedment.jpastreamer.field.ReferenceField;
import com.speedment.jpastreamer.field.StringField;

import java.time.LocalDateTime;
import java.util.List;

/**
 * The generated base for entity {@link Film} representing entities of the
 * {@code film}-table in the database.
 * <p> This file has been automatically generated by JPAStreamer.
 * 
 * @author JPAStreamer
 */
public class Film$ {
    
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getTitle()} method.
     */
    public static final StringField<Film> title = StringField.create(
        Film.class,
        "title",
        Film::getTitle,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRating()} method.
     */
    public static final StringField<Film> rating = StringField.create(
        Film.class,
        "rating",
        Film::getRating,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLanguage()} method.
     */
    public static final ReferenceField<Film, Language> language = ReferenceField.create(
        Film.class,
        "language",
        Film::getLanguage,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRentalRate()} method.
     */
    public static final ComparableField<Film, Float> rentalRate = ComparableField.create(
        Film.class,
        "rentalRate",
        Film::getRentalRate,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLength()} method.
     */
    public static final ComparableField<Film, Integer> length = ComparableField.create(
        Film.class,
        "length",
        Film::getLength,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getReplacementCost()} method.
     */
    public static final ComparableField<Film, Float> replacementCost = ComparableField.create(
        Film.class,
        "replacementCost",
        Film::getReplacementCost,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getLastUpdate()} method.
     */
    public static final ComparableField<Film, LocalDateTime> lastUpdate = ComparableField.create(
        Film.class,
        "lastUpdate",
        Film::getLastUpdate,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getRentalDuration()} method.
     */
    public static final ComparableField<Film, Integer> rentalDuration = ComparableField.create(
        Film.class,
        "rentalDuration",
        Film::getRentalDuration,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getFilmId()} method.
     */
    public static final ComparableField<Film, Integer> filmId = ComparableField.create(
        Film.class,
        "filmId",
        Film::getFilmId,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getDescription()} method.
     */
    public static final StringField<Film> description = StringField.create(
        Film.class,
        "description",
        Film::getDescription,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getActors()} method.
     */
    public static final ReferenceField<Film, List<Actor>> actors = ReferenceField.create(
        Film.class,
        "actors",
        Film::getActors,
        false
    );
    /**
     * This Field corresponds to the {@link Film} field that can be obtained
     * using the {@link Film#getSpecialFeatures()} method.
     */
    public static final StringField<Film> specialFeatures = StringField.create(
        Film.class,
        "specialFeatures",
        Film::getSpecialFeatures,
        false
    );
}